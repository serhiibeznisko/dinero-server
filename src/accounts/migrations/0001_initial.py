# Generated by Django 2.2.10 on 2020-06-16 21:08

import accounts.managers
import core.mixins
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last updated at')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site as staff user.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the user should be treated as active. Deselect instead of deleting the user.', verbose_name='Active status')),
                ('is_email_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified its email address.', verbose_name='Email verified')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('jwt_secret', models.UUIDField(default=uuid.uuid4)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, core.mixins.UpdateMixin),
            managers=[
                ('all', accounts.managers.UserManager()),
                ('objects', accounts.managers.UserManagerActive()),
            ],
        ),
    ]
